-----------------JCLexec.groovy------------
@groovy.transform.BaseScript com.ibm.dbb.groovy.ScriptLoader baseScript import com.ibm.dbb.repository.* import com.ibm.dbb.dependency.* import com.ibm.dbb.build.* import groovy.transform.*  import groovy.json.JsonSlurper  import groovy.util.XmlParser import groovy.util.XmlSlurper   // define script properties @Field BuildProperties props = BuildProperties.getInstance() @Field def buildUtils= loadScript(new File("/u/DMJTA1/dbb /utilities/BuildUtilities.groovy"))   def playBackFile = null  getTestProperties(args)  def env=System.getenv() 	String dbb_home = env['DBB_HOME']       if (props.verbose) { 		println("dbbconf: ${dbb_home}/conf")      } 	//Execute JCL from a String value in the script 	def jcl = "//RUN#VTP JOB , \n" +                                                            	"// MSGCLASS=H,MSGLEVEL=(1,1),TIME=NOLIMIT,REGION=0M,COND=(16,LT) \n" +  	"//        JCLLIB ORDER=(IDZ15.BZU00.#CUST.PROCLIB) \n" + 	"//* \n" + 	"//RUNNER EXEC PROC=BZUPPLAY, \n" +  	"//  PRM='STOP=E', \n" +        "//  BZULOD=${.user-load.}, \n" +
	"//  BZULOD2=${.application-load.}, \n" +
	"//  BZUPLAY=${.test-case-file.} \n" + 	"//*  BZUEXTRA=" + props.vtp_STEPLIB   	 	if (props.verbose) { 				 		println(jcl) 	} 	 	def exec = new JCLExec() 	int rc = exec.text(jcl).confDir("${dbb_home}/conf").execute() 	sleep(5000) 	 	/* Check the return code from the submitted job */ 	def maxRC = exec.maxRC 	if ((maxRC == 'CC 0000') || (maxRC == 'CC 0004')) 	    println "The JCL Job ${exec.submittedJobId} completed successfully" 	else {  	    println "The JCL Job ${exec.submittedJobId} completed with Max-RC: $maxRC" 	    System.exit(1) 	} 	     def logFile = "${props.workDir}/VTP-Messages-1047.bzumsg" 	println "*** Log: $logFile" 	def file = new File(logFile) 	exec.saveOutput('BZUMSG', file, null)   // end script  def getTestProperties(String[] args) {  	def zAppBuildDir =  getScriptDir()  	props.zAppBuildDir = zAppBuildDir 	println(zAppBuildDir) 	 	String usage = 'VTPExecute.groovy [options] ' 	String header =  '''Playback of wazi VTP   	options: 		''' 		 	def cli = new CliBuilder(usage:usage,header:header) 	cli.p(longOpt:'playBackFile', args:1, 'Name of the playback file') 	cli.c(longOpt:'testConf', args:1, 'Absolute path to the zUnit properties directory') 	cli.l(longOpt:'load_PDS', args:1, 'Loadlib containing test case binaries') 	cli.w(longOpt:'workDir',args:1, 'Workdir for results') 	cli.v(longOpt:'verbose', 'Flag to turn on script trace') 	 	def opts = cli.parse(args) 	if (!opts) { 		println(header) 		System.exit(1) 	}   	if (opts.p) props.playFile = opts.p 	if (opts.c) props.testConf = opts.c 	if (opts.l) props.load_PDS = opts.l 	if (opts.w) props.workDir  = opts.w 	if (opts.v) props.verbose = 'true' 		 	buildUtils.assertBuildProperties('load_PDS,testConf,playFile,workDir')  	println("** Running VTP files with ${this.class.getName()}.groovy script")      	props.load(new File("${props.testConf}/vtp.properties"))  	// verify required test properties     buildUtils.assertBuildProperties(props.vtp_requiredBuildProperties) //	     if (props.verbose) {  		println("proclib: ${props.vtp_ProcLib}") 		println("conf: ${props.testConf}") 		println("steplib: ${props.vtp_STEPLIB}") 		println("playFile: ${props.playFile}") 		println("loadPDS: ${props.load_PDS}") 		println("workDir: ${props.workDir}")     } }
